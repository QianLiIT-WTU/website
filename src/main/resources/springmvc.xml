<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"

	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/task
   		http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://code.alibabatech.com/schema/dubbo        

		http://www.springframework.org/schema/websocket 
		http://www.springframework.org/schema/websocket/spring-websocket.xsd" >

	<!-- 加载属性文件 -->

	<!-- 配置扫描 器 -->
	<context:component-scan
		base-package="com.qianli.web" />
	<!-- 配置处理器映射器 适配器 -->
	<mvc:annotation-driven />

	<!-- 上传图片配置实现类 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--      <property name="maxUploadSize" value="104857600"/>      -->
		<!--    <property name="maxInMemorySize" value="4096"/>   -->
	</bean>

	<!-- 配置json转换器 -->
	<bean id="jsonMessageConverters"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- JSON视图拦截器，碰到ResponseBody会触发 -->
				<ref bean="jsonMessageConverters" />
			</list>
		</property>
	</bean>


	<!-- 配置视图解释器 jsp -->
	<bean id="jspViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
	</bean>




	<mvc:annotation-driven></mvc:annotation-driven>






	<!--对所有静态资源放行 -->
 	<mvc:default-servlet-handler /> 
<!-- 	<mvc:resources location="/" mapping="/**" /> -->

	<bean id="myHandler" class="com.qianli.web.websocket.WebSocketPushHandler"/>
	<websocket:handlers allowed-origins="*">
		<websocket:mapping path="/websocket/socketServer"
			handler="myHandler" />
		<websocket:handshake-interceptors>
			<bean class="com.qianli.web.websocket.MyWebSocketInterceptor" />
		</websocket:handshake-interceptors>
	</websocket:handlers>

	<websocket:handlers allowed-origins="*">
		<websocket:mapping path="/sockjs/socketServer"
			handler="myHandler" />
		<websocket:sockjs />
	</websocket:handlers>



	<!--     配置拦截器 -->

	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 拦截所有mvc控制器 -->
			<mvc:mapping path="/user/**"/>
		<mvc:mapping path="/conmment/**"/>
		<mvc:mapping path="/flag/**"/>
		<mvc:mapping path="/image/**"/>
		<mvc:mapping path="/announce/**"/>
		<mvc:mapping path="/post/**"/>
		<mvc:mapping path="/source/**"/>
			<!-- mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在
				LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) -->
			<mvc:exclude-mapping path="/user/login"/>
			<mvc:exclude-mapping path="/user/regist"/>
			<mvc:exclude-mapping path="/user/active"/>
			<mvc:exclude-mapping path="/user/findPsw"/>
			<mvc:exclude-mapping path="/user/findUser"/>
			<mvc:exclude-mapping path="/user/Alogin"/>
			
			<bean class="com.qianli.web.interceptor.LoginInterceptor"></bean>			
		</mvc:interceptor>
	</mvc:interceptors>

	
</beans>

